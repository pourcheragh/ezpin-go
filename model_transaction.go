/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	// id of activation transaction
	TransactionId *float32 `json:"transaction_id,omitempty"`
	// barcode of physical card
	Barcode *string `json:"barcode,omitempty"`
	// name of product
	Product *string `json:"product,omitempty"`
	// Pending(-1) , Activated(1) , Inactive(0)
	Status *float32 `json:"status,omitempty"`
	// status of activation order
	StatusText *string `json:"status_text,omitempty"`
	// physical card price
	TotalFaceValue *float32 `json:"total_face_value,omitempty"`
	// activation fee of physical card
	TotalFees *float32 `json:"total_fees,omitempty"`
	// discount of physical card
	TotalDiscounts *float32 `json:"total_discounts,omitempty"`
	// price that customer should pay
	TotalCustomerCost *float32 `json:"total_customer_cost,omitempty"`
	// Terminal ID of the sub-user
	TerminalId *float32 `json:"terminal_id,omitempty"`
	// name of currency
	Currency *string `json:"currency,omitempty"`
	// time of activation
	CreatedTime *string `json:"created_time,omitempty"`
	// reference code of activation
	ReferenceCode *string `json:"reference_code,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction() *Transaction {
	this := Transaction{}
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Transaction) GetTransactionId() float32 {
	if o == nil || IsNil(o.TransactionId) {
		var ret float32
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Transaction) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given float32 and assigns it to the TransactionId field.
func (o *Transaction) SetTransactionId(v float32) {
	o.TransactionId = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *Transaction) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *Transaction) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *Transaction) SetBarcode(v string) {
	o.Barcode = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *Transaction) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *Transaction) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *Transaction) SetProduct(v string) {
	o.Product = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Transaction) GetStatus() float32 {
	if o == nil || IsNil(o.Status) {
		var ret float32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*float32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Transaction) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given float32 and assigns it to the Status field.
func (o *Transaction) SetStatus(v float32) {
	o.Status = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *Transaction) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *Transaction) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *Transaction) SetStatusText(v string) {
	o.StatusText = &v
}

// GetTotalFaceValue returns the TotalFaceValue field value if set, zero value otherwise.
func (o *Transaction) GetTotalFaceValue() float32 {
	if o == nil || IsNil(o.TotalFaceValue) {
		var ret float32
		return ret
	}
	return *o.TotalFaceValue
}

// GetTotalFaceValueOk returns a tuple with the TotalFaceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalFaceValueOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalFaceValue) {
		return nil, false
	}
	return o.TotalFaceValue, true
}

// HasTotalFaceValue returns a boolean if a field has been set.
func (o *Transaction) HasTotalFaceValue() bool {
	if o != nil && !IsNil(o.TotalFaceValue) {
		return true
	}

	return false
}

// SetTotalFaceValue gets a reference to the given float32 and assigns it to the TotalFaceValue field.
func (o *Transaction) SetTotalFaceValue(v float32) {
	o.TotalFaceValue = &v
}

// GetTotalFees returns the TotalFees field value if set, zero value otherwise.
func (o *Transaction) GetTotalFees() float32 {
	if o == nil || IsNil(o.TotalFees) {
		var ret float32
		return ret
	}
	return *o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalFeesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalFees) {
		return nil, false
	}
	return o.TotalFees, true
}

// HasTotalFees returns a boolean if a field has been set.
func (o *Transaction) HasTotalFees() bool {
	if o != nil && !IsNil(o.TotalFees) {
		return true
	}

	return false
}

// SetTotalFees gets a reference to the given float32 and assigns it to the TotalFees field.
func (o *Transaction) SetTotalFees(v float32) {
	o.TotalFees = &v
}

// GetTotalDiscounts returns the TotalDiscounts field value if set, zero value otherwise.
func (o *Transaction) GetTotalDiscounts() float32 {
	if o == nil || IsNil(o.TotalDiscounts) {
		var ret float32
		return ret
	}
	return *o.TotalDiscounts
}

// GetTotalDiscountsOk returns a tuple with the TotalDiscounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalDiscountsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalDiscounts) {
		return nil, false
	}
	return o.TotalDiscounts, true
}

// HasTotalDiscounts returns a boolean if a field has been set.
func (o *Transaction) HasTotalDiscounts() bool {
	if o != nil && !IsNil(o.TotalDiscounts) {
		return true
	}

	return false
}

// SetTotalDiscounts gets a reference to the given float32 and assigns it to the TotalDiscounts field.
func (o *Transaction) SetTotalDiscounts(v float32) {
	o.TotalDiscounts = &v
}

// GetTotalCustomerCost returns the TotalCustomerCost field value if set, zero value otherwise.
func (o *Transaction) GetTotalCustomerCost() float32 {
	if o == nil || IsNil(o.TotalCustomerCost) {
		var ret float32
		return ret
	}
	return *o.TotalCustomerCost
}

// GetTotalCustomerCostOk returns a tuple with the TotalCustomerCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalCustomerCostOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCustomerCost) {
		return nil, false
	}
	return o.TotalCustomerCost, true
}

// HasTotalCustomerCost returns a boolean if a field has been set.
func (o *Transaction) HasTotalCustomerCost() bool {
	if o != nil && !IsNil(o.TotalCustomerCost) {
		return true
	}

	return false
}

// SetTotalCustomerCost gets a reference to the given float32 and assigns it to the TotalCustomerCost field.
func (o *Transaction) SetTotalCustomerCost(v float32) {
	o.TotalCustomerCost = &v
}

// GetTerminalId returns the TerminalId field value if set, zero value otherwise.
func (o *Transaction) GetTerminalId() float32 {
	if o == nil || IsNil(o.TerminalId) {
		var ret float32
		return ret
	}
	return *o.TerminalId
}

// GetTerminalIdOk returns a tuple with the TerminalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTerminalIdOk() (*float32, bool) {
	if o == nil || IsNil(o.TerminalId) {
		return nil, false
	}
	return o.TerminalId, true
}

// HasTerminalId returns a boolean if a field has been set.
func (o *Transaction) HasTerminalId() bool {
	if o != nil && !IsNil(o.TerminalId) {
		return true
	}

	return false
}

// SetTerminalId gets a reference to the given float32 and assigns it to the TerminalId field.
func (o *Transaction) SetTerminalId(v float32) {
	o.TerminalId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Transaction) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Transaction) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Transaction) SetCurrency(v string) {
	o.Currency = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Transaction) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Transaction) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *Transaction) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetReferenceCode returns the ReferenceCode field value if set, zero value otherwise.
func (o *Transaction) GetReferenceCode() string {
	if o == nil || IsNil(o.ReferenceCode) {
		var ret string
		return ret
	}
	return *o.ReferenceCode
}

// GetReferenceCodeOk returns a tuple with the ReferenceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetReferenceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceCode) {
		return nil, false
	}
	return o.ReferenceCode, true
}

// HasReferenceCode returns a boolean if a field has been set.
func (o *Transaction) HasReferenceCode() bool {
	if o != nil && !IsNil(o.ReferenceCode) {
		return true
	}

	return false
}

// SetReferenceCode gets a reference to the given string and assigns it to the ReferenceCode field.
func (o *Transaction) SetReferenceCode(v string) {
	o.ReferenceCode = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}
	if !IsNil(o.TotalFaceValue) {
		toSerialize["total_face_value"] = o.TotalFaceValue
	}
	if !IsNil(o.TotalFees) {
		toSerialize["total_fees"] = o.TotalFees
	}
	if !IsNil(o.TotalDiscounts) {
		toSerialize["total_discounts"] = o.TotalDiscounts
	}
	if !IsNil(o.TotalCustomerCost) {
		toSerialize["total_customer_cost"] = o.TotalCustomerCost
	}
	if !IsNil(o.TerminalId) {
		toSerialize["terminal_id"] = o.TerminalId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.ReferenceCode) {
		toSerialize["reference_code"] = o.ReferenceCode
	}
	return toSerialize, nil
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


