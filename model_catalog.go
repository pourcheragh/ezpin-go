/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"

	"github.com/shopspring/decimal"
)

// checks if the Catalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Catalog{}

// Catalog struct for Catalog
type Catalog struct {
	// sku of product
	Sku *int32 `json:"sku,omitempty"`
	// upc of product
	Upc *string `json:"upc,omitempty"`
	// title of product
	Title *string `json:"title,omitempty"`
	// product minimumm price
	MinPrice *decimal.Decimal `json:"min_price,omitempty"`
	// product maximumm price
	MaxPrice *decimal.Decimal `json:"max_price,omitempty"`
	// product has preorder feature or not.
	PreOrder *bool `json:"pre_order,omitempty"`
	// fixed activation fee of product
	ActivationFee *decimal.Decimal `json:"activation_fee,omitempty"`
	// discount applied on buying price
	PercentageOfBuyingPrice *decimal.Decimal `json:"percentage_of_buying_price,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Categories []Category `json:"categories,omitempty"`
	Regions []Regions `json:"regions,omitempty"`
	// image link of product
	Image *string `json:"image,omitempty"`
	// product discription
	Description *string `json:"description,omitempty"`
	ShowingPrice *CatalogShowingPrice `json:"showing_price,omitempty"`
}

// NewCatalog instantiates a new Catalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalog() *Catalog {
	this := Catalog{}
	return &this
}

// NewCatalogWithDefaults instantiates a new Catalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogWithDefaults() *Catalog {
	this := Catalog{}
	return &this
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *Catalog) GetSku() int32 {
	if o == nil || IsNil(o.Sku) {
		var ret int32
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetSkuOk() (*int32, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *Catalog) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given int32 and assigns it to the Sku field.
func (o *Catalog) SetSku(v int32) {
	o.Sku = &v
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *Catalog) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *Catalog) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *Catalog) SetUpc(v string) {
	o.Upc = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Catalog) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Catalog) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Catalog) SetTitle(v string) {
	o.Title = &v
}

// GetMinPrice returns the MinPrice field value if set, zero value otherwise.
func (o *Catalog) GetMinPrice() decimal.Decimal {
	if o == nil || IsNil(o.MinPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.MinPrice
}

// GetMinPriceOk returns a tuple with the MinPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetMinPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.MinPrice) {
		return nil, false
	}
	return o.MinPrice, true
}

// HasMinPrice returns a boolean if a field has been set.
func (o *Catalog) HasMinPrice() bool {
	if o != nil && !IsNil(o.MinPrice) {
		return true
	}

	return false
}

// SetMinPrice gets a reference to the given decimal.Decimal and assigns it to the MinPrice field.
func (o *Catalog) SetMinPrice(v decimal.Decimal) {
	o.MinPrice = &v
}

// GetMaxPrice returns the MaxPrice field value if set, zero value otherwise.
func (o *Catalog) GetMaxPrice() decimal.Decimal {
	if o == nil || IsNil(o.MaxPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.MaxPrice
}

// GetMaxPriceOk returns a tuple with the MaxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetMaxPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.MaxPrice) {
		return nil, false
	}
	return o.MaxPrice, true
}

// HasMaxPrice returns a boolean if a field has been set.
func (o *Catalog) HasMaxPrice() bool {
	if o != nil && !IsNil(o.MaxPrice) {
		return true
	}

	return false
}

// SetMaxPrice gets a reference to the given decimal.Decimal and assigns it to the MaxPrice field.
func (o *Catalog) SetMaxPrice(v decimal.Decimal) {
	o.MaxPrice = &v
}

// GetPreOrder returns the PreOrder field value if set, zero value otherwise.
func (o *Catalog) GetPreOrder() bool {
	if o == nil || IsNil(o.PreOrder) {
		var ret bool
		return ret
	}
	return *o.PreOrder
}

// GetPreOrderOk returns a tuple with the PreOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetPreOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.PreOrder) {
		return nil, false
	}
	return o.PreOrder, true
}

// HasPreOrder returns a boolean if a field has been set.
func (o *Catalog) HasPreOrder() bool {
	if o != nil && !IsNil(o.PreOrder) {
		return true
	}

	return false
}

// SetPreOrder gets a reference to the given bool and assigns it to the PreOrder field.
func (o *Catalog) SetPreOrder(v bool) {
	o.PreOrder = &v
}

// GetActivationFee returns the ActivationFee field value if set, zero value otherwise.
func (o *Catalog) GetActivationFee() decimal.Decimal {
	if o == nil || IsNil(o.ActivationFee) {
		var ret decimal.Decimal
		return ret
	}
	return *o.ActivationFee
}

// GetActivationFeeOk returns a tuple with the ActivationFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetActivationFeeOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.ActivationFee) {
		return nil, false
	}
	return o.ActivationFee, true
}

// HasActivationFee returns a boolean if a field has been set.
func (o *Catalog) HasActivationFee() bool {
	if o != nil && !IsNil(o.ActivationFee) {
		return true
	}

	return false
}

// SetActivationFee gets a reference to the given decimal.Decimal and assigns it to the ActivationFee field.
func (o *Catalog) SetActivationFee(v decimal.Decimal) {
	o.ActivationFee = &v
}

// GetPercentageOfBuyingPrice returns the PercentageOfBuyingPrice field value if set, zero value otherwise.
func (o *Catalog) GetPercentageOfBuyingPrice() decimal.Decimal {
	if o == nil || IsNil(o.PercentageOfBuyingPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.PercentageOfBuyingPrice
}

// GetPercentageOfBuyingPriceOk returns a tuple with the PercentageOfBuyingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetPercentageOfBuyingPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.PercentageOfBuyingPrice) {
		return nil, false
	}
	return o.PercentageOfBuyingPrice, true
}

// HasPercentageOfBuyingPrice returns a boolean if a field has been set.
func (o *Catalog) HasPercentageOfBuyingPrice() bool {
	if o != nil && !IsNil(o.PercentageOfBuyingPrice) {
		return true
	}

	return false
}

// SetPercentageOfBuyingPrice gets a reference to the given decimal.Decimal and assigns it to the PercentageOfBuyingPrice field.
func (o *Catalog) SetPercentageOfBuyingPrice(v decimal.Decimal) {
	o.PercentageOfBuyingPrice = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Catalog) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Catalog) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *Catalog) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Catalog) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Catalog) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *Catalog) SetCategories(v []Category) {
	o.Categories = v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Catalog) GetRegions() []Regions {
	if o == nil || IsNil(o.Regions) {
		var ret []Regions
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetRegionsOk() ([]Regions, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Catalog) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Regions and assigns it to the Regions field.
func (o *Catalog) SetRegions(v []Regions) {
	o.Regions = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *Catalog) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *Catalog) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *Catalog) SetImage(v string) {
	o.Image = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Catalog) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Catalog) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Catalog) SetDescription(v string) {
	o.Description = &v
}

// GetShowingPrice returns the ShowingPrice field value if set, zero value otherwise.
func (o *Catalog) GetShowingPrice() CatalogShowingPrice {
	if o == nil || IsNil(o.ShowingPrice) {
		var ret CatalogShowingPrice
		return ret
	}
	return *o.ShowingPrice
}

// GetShowingPriceOk returns a tuple with the ShowingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetShowingPriceOk() (*CatalogShowingPrice, bool) {
	if o == nil || IsNil(o.ShowingPrice) {
		return nil, false
	}
	return o.ShowingPrice, true
}

// HasShowingPrice returns a boolean if a field has been set.
func (o *Catalog) HasShowingPrice() bool {
	if o != nil && !IsNil(o.ShowingPrice) {
		return true
	}

	return false
}

// SetShowingPrice gets a reference to the given CatalogShowingPrice and assigns it to the ShowingPrice field.
func (o *Catalog) SetShowingPrice(v CatalogShowingPrice) {
	o.ShowingPrice = &v
}

func (o Catalog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Catalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.MinPrice) {
		toSerialize["min_price"] = o.MinPrice
	}
	if !IsNil(o.MaxPrice) {
		toSerialize["max_price"] = o.MaxPrice
	}
	if !IsNil(o.PreOrder) {
		toSerialize["pre_order"] = o.PreOrder
	}
	if !IsNil(o.ActivationFee) {
		toSerialize["activation_fee"] = o.ActivationFee
	}
	if !IsNil(o.PercentageOfBuyingPrice) {
		toSerialize["percentage_of_buying_price"] = o.PercentageOfBuyingPrice
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ShowingPrice) {
		toSerialize["showing_price"] = o.ShowingPrice
	}
	return toSerialize, nil
}

type NullableCatalog struct {
	value *Catalog
	isSet bool
}

func (v NullableCatalog) Get() *Catalog {
	return v.value
}

func (v *NullableCatalog) Set(val *Catalog) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalog(val *Catalog) *NullableCatalog {
	return &NullableCatalog{value: val, isSet: true}
}

func (v NullableCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


