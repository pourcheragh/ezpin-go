/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"

	"github.com/shopspring/decimal"
)

// checks if the CryptoCurrencyOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoCurrencyOrder{}

// CryptoCurrencyOrder struct for CryptoCurrencyOrder
type CryptoCurrencyOrder struct {
	// crypto order id
	Id *int32 `json:"id,omitempty"`
	// refence code of this crypto order
	ReferenceCode *string `json:"reference_code,omitempty"`
	// The amount of crypto you ordered.
	RequestedPrice *decimal.Decimal `json:"requested_price,omitempty"`
	// price of this order
	Price *decimal.Decimal `json:"price,omitempty"`
	// id of this crypto currency
	CryptoCurrencyId *int32 `json:"crypto_currency_id,omitempty"`
	CryptoCurrencyData *CryptoCurrencyOrderCryptoCurrencyData `json:"crypto_currency_data,omitempty"`
	// id of fiat currency
	CurrencyId *int32 `json:"currency_id,omitempty"`
	CurrencyDaya *CryptoCurrencyOrderCurrencyDaya `json:"currency_daya,omitempty"`
	// *`-5` Expired *`-1` Reject *`0` Waiting *`1` Accept
	Status *int32 `json:"status,omitempty"`
	// The destination wallet.
	CryptoWallet *string `json:"crypto_wallet,omitempty"`
	// text of status
	StatusText *string `json:"status_text,omitempty"`
	// percentage of commission defined for this user
	CommissionPercent *decimal.Decimal `json:"commission_percent,omitempty"`
	// price of commission defined for this user.
	CommissionPrice *decimal.Decimal `json:"commission_price,omitempty"`
	// commission of network.
	NetworkFee *decimal.Decimal `json:"network_fee,omitempty"`
	// amount of crypto.
	CryptoAmount *decimal.Decimal `json:"crypto_amount,omitempty"`
	// last price of that crypto currency that you want to buy.
	CryptoPrice *decimal.Decimal `json:"crypto_price,omitempty"`
	// can this order be payed or not.
	CanPay *bool `json:"can_pay,omitempty"`
	// is order redeemed or not.
	IsUsed *bool `json:"is_used,omitempty"`
	// the time of redemption of order.
	UsedTime *string `json:"used_time,omitempty"`
	// order creation time.
	CreatedTime *string `json:"created_time,omitempty"`
	// sub user id
	TerminalId *int32 `json:"terminal_id,omitempty"`
}

// NewCryptoCurrencyOrder instantiates a new CryptoCurrencyOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrencyOrder() *CryptoCurrencyOrder {
	this := CryptoCurrencyOrder{}
	return &this
}

// NewCryptoCurrencyOrderWithDefaults instantiates a new CryptoCurrencyOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyOrderWithDefaults() *CryptoCurrencyOrder {
	this := CryptoCurrencyOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CryptoCurrencyOrder) SetId(v int32) {
	o.Id = &v
}

// GetReferenceCode returns the ReferenceCode field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetReferenceCode() string {
	if o == nil || IsNil(o.ReferenceCode) {
		var ret string
		return ret
	}
	return *o.ReferenceCode
}

// GetReferenceCodeOk returns a tuple with the ReferenceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetReferenceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceCode) {
		return nil, false
	}
	return o.ReferenceCode, true
}

// HasReferenceCode returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasReferenceCode() bool {
	if o != nil && !IsNil(o.ReferenceCode) {
		return true
	}

	return false
}

// SetReferenceCode gets a reference to the given string and assigns it to the ReferenceCode field.
func (o *CryptoCurrencyOrder) SetReferenceCode(v string) {
	o.ReferenceCode = &v
}

// GetRequestedPrice returns the RequestedPrice field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetRequestedPrice() decimal.Decimal {
	if o == nil || IsNil(o.RequestedPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.RequestedPrice
}

// GetRequestedPriceOk returns a tuple with the RequestedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetRequestedPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.RequestedPrice) {
		return nil, false
	}
	return o.RequestedPrice, true
}

// HasRequestedPrice returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasRequestedPrice() bool {
	if o != nil && !IsNil(o.RequestedPrice) {
		return true
	}

	return false
}

// SetRequestedPrice gets a reference to the given decimal.Decimal and assigns it to the RequestedPrice field.
func (o *CryptoCurrencyOrder) SetRequestedPrice(v decimal.Decimal) {
	o.RequestedPrice = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetPrice() decimal.Decimal {
	if o == nil || IsNil(o.Price) {
		var ret decimal.Decimal
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given decimal.Decimal and assigns it to the Price field.
func (o *CryptoCurrencyOrder) SetPrice(v decimal.Decimal) {
	o.Price = &v
}

// GetCryptoCurrencyId returns the CryptoCurrencyId field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCryptoCurrencyId() int32 {
	if o == nil || IsNil(o.CryptoCurrencyId) {
		var ret int32
		return ret
	}
	return *o.CryptoCurrencyId
}

// GetCryptoCurrencyIdOk returns a tuple with the CryptoCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCryptoCurrencyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CryptoCurrencyId) {
		return nil, false
	}
	return o.CryptoCurrencyId, true
}

// HasCryptoCurrencyId returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCryptoCurrencyId() bool {
	if o != nil && !IsNil(o.CryptoCurrencyId) {
		return true
	}

	return false
}

// SetCryptoCurrencyId gets a reference to the given int32 and assigns it to the CryptoCurrencyId field.
func (o *CryptoCurrencyOrder) SetCryptoCurrencyId(v int32) {
	o.CryptoCurrencyId = &v
}

// GetCryptoCurrencyData returns the CryptoCurrencyData field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCryptoCurrencyData() CryptoCurrencyOrderCryptoCurrencyData {
	if o == nil || IsNil(o.CryptoCurrencyData) {
		var ret CryptoCurrencyOrderCryptoCurrencyData
		return ret
	}
	return *o.CryptoCurrencyData
}

// GetCryptoCurrencyDataOk returns a tuple with the CryptoCurrencyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCryptoCurrencyDataOk() (*CryptoCurrencyOrderCryptoCurrencyData, bool) {
	if o == nil || IsNil(o.CryptoCurrencyData) {
		return nil, false
	}
	return o.CryptoCurrencyData, true
}

// HasCryptoCurrencyData returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCryptoCurrencyData() bool {
	if o != nil && !IsNil(o.CryptoCurrencyData) {
		return true
	}

	return false
}

// SetCryptoCurrencyData gets a reference to the given CryptoCurrencyOrderCryptoCurrencyData and assigns it to the CryptoCurrencyData field.
func (o *CryptoCurrencyOrder) SetCryptoCurrencyData(v CryptoCurrencyOrderCryptoCurrencyData) {
	o.CryptoCurrencyData = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCurrencyId() int32 {
	if o == nil || IsNil(o.CurrencyId) {
		var ret int32
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCurrencyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given int32 and assigns it to the CurrencyId field.
func (o *CryptoCurrencyOrder) SetCurrencyId(v int32) {
	o.CurrencyId = &v
}

// GetCurrencyDaya returns the CurrencyDaya field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCurrencyDaya() CryptoCurrencyOrderCurrencyDaya {
	if o == nil || IsNil(o.CurrencyDaya) {
		var ret CryptoCurrencyOrderCurrencyDaya
		return ret
	}
	return *o.CurrencyDaya
}

// GetCurrencyDayaOk returns a tuple with the CurrencyDaya field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCurrencyDayaOk() (*CryptoCurrencyOrderCurrencyDaya, bool) {
	if o == nil || IsNil(o.CurrencyDaya) {
		return nil, false
	}
	return o.CurrencyDaya, true
}

// HasCurrencyDaya returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCurrencyDaya() bool {
	if o != nil && !IsNil(o.CurrencyDaya) {
		return true
	}

	return false
}

// SetCurrencyDaya gets a reference to the given CryptoCurrencyOrderCurrencyDaya and assigns it to the CurrencyDaya field.
func (o *CryptoCurrencyOrder) SetCurrencyDaya(v CryptoCurrencyOrderCurrencyDaya) {
	o.CurrencyDaya = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *CryptoCurrencyOrder) SetStatus(v int32) {
	o.Status = &v
}

// GetCryptoWallet returns the CryptoWallet field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCryptoWallet() string {
	if o == nil || IsNil(o.CryptoWallet) {
		var ret string
		return ret
	}
	return *o.CryptoWallet
}

// GetCryptoWalletOk returns a tuple with the CryptoWallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCryptoWalletOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoWallet) {
		return nil, false
	}
	return o.CryptoWallet, true
}

// HasCryptoWallet returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCryptoWallet() bool {
	if o != nil && !IsNil(o.CryptoWallet) {
		return true
	}

	return false
}

// SetCryptoWallet gets a reference to the given string and assigns it to the CryptoWallet field.
func (o *CryptoCurrencyOrder) SetCryptoWallet(v string) {
	o.CryptoWallet = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *CryptoCurrencyOrder) SetStatusText(v string) {
	o.StatusText = &v
}

// GetCommissionPercent returns the CommissionPercent field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCommissionPercent() decimal.Decimal {
	if o == nil || IsNil(o.CommissionPercent) {
		var ret decimal.Decimal
		return ret
	}
	return *o.CommissionPercent
}

// GetCommissionPercentOk returns a tuple with the CommissionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCommissionPercentOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.CommissionPercent) {
		return nil, false
	}
	return o.CommissionPercent, true
}

// HasCommissionPercent returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCommissionPercent() bool {
	if o != nil && !IsNil(o.CommissionPercent) {
		return true
	}

	return false
}

// SetCommissionPercent gets a reference to the given decimal.Decimal and assigns it to the CommissionPercent field.
func (o *CryptoCurrencyOrder) SetCommissionPercent(v decimal.Decimal) {
	o.CommissionPercent = &v
}

// GetCommissionPrice returns the CommissionPrice field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCommissionPrice() decimal.Decimal {
	if o == nil || IsNil(o.CommissionPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.CommissionPrice
}

// GetCommissionPriceOk returns a tuple with the CommissionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCommissionPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.CommissionPrice) {
		return nil, false
	}
	return o.CommissionPrice, true
}

// HasCommissionPrice returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCommissionPrice() bool {
	if o != nil && !IsNil(o.CommissionPrice) {
		return true
	}

	return false
}

// SetCommissionPrice gets a reference to the given decimal.Decimal and assigns it to the CommissionPrice field.
func (o *CryptoCurrencyOrder) SetCommissionPrice(v decimal.Decimal) {
	o.CommissionPrice = &v
}

// GetNetworkFee returns the NetworkFee field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetNetworkFee() decimal.Decimal {
	if o == nil || IsNil(o.NetworkFee) {
		var ret decimal.Decimal
		return ret
	}
	return *o.NetworkFee
}

// GetNetworkFeeOk returns a tuple with the NetworkFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetNetworkFeeOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.NetworkFee) {
		return nil, false
	}
	return o.NetworkFee, true
}

// HasNetworkFee returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasNetworkFee() bool {
	if o != nil && !IsNil(o.NetworkFee) {
		return true
	}

	return false
}

// SetNetworkFee gets a reference to the given decimal.Decimal and assigns it to the NetworkFee field.
func (o *CryptoCurrencyOrder) SetNetworkFee(v decimal.Decimal) {
	o.NetworkFee = &v
}

// GetCryptoAmount returns the CryptoAmount field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCryptoAmount() decimal.Decimal {
	if o == nil || IsNil(o.CryptoAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.CryptoAmount
}

// GetCryptoAmountOk returns a tuple with the CryptoAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCryptoAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.CryptoAmount) {
		return nil, false
	}
	return o.CryptoAmount, true
}

// HasCryptoAmount returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCryptoAmount() bool {
	if o != nil && !IsNil(o.CryptoAmount) {
		return true
	}

	return false
}

// SetCryptoAmount gets a reference to the given decimal.Decimal and assigns it to the CryptoAmount field.
func (o *CryptoCurrencyOrder) SetCryptoAmount(v decimal.Decimal) {
	o.CryptoAmount = &v
}

// GetCryptoPrice returns the CryptoPrice field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCryptoPrice() decimal.Decimal {
	if o == nil || IsNil(o.CryptoPrice) {
		var ret decimal.Decimal
		return ret
	}
	return *o.CryptoPrice
}

// GetCryptoPriceOk returns a tuple with the CryptoPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCryptoPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.CryptoPrice) {
		return nil, false
	}
	return o.CryptoPrice, true
}

// HasCryptoPrice returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCryptoPrice() bool {
	if o != nil && !IsNil(o.CryptoPrice) {
		return true
	}

	return false
}

// SetCryptoPrice gets a reference to the given decimal.Decimal and assigns it to the CryptoPrice field.
func (o *CryptoCurrencyOrder) SetCryptoPrice(v decimal.Decimal) {
	o.CryptoPrice = &v
}

// GetCanPay returns the CanPay field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCanPay() bool {
	if o == nil || IsNil(o.CanPay) {
		var ret bool
		return ret
	}
	return *o.CanPay
}

// GetCanPayOk returns a tuple with the CanPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCanPayOk() (*bool, bool) {
	if o == nil || IsNil(o.CanPay) {
		return nil, false
	}
	return o.CanPay, true
}

// HasCanPay returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCanPay() bool {
	if o != nil && !IsNil(o.CanPay) {
		return true
	}

	return false
}

// SetCanPay gets a reference to the given bool and assigns it to the CanPay field.
func (o *CryptoCurrencyOrder) SetCanPay(v bool) {
	o.CanPay = &v
}

// GetIsUsed returns the IsUsed field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetIsUsed() bool {
	if o == nil || IsNil(o.IsUsed) {
		var ret bool
		return ret
	}
	return *o.IsUsed
}

// GetIsUsedOk returns a tuple with the IsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetIsUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsed) {
		return nil, false
	}
	return o.IsUsed, true
}

// HasIsUsed returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasIsUsed() bool {
	if o != nil && !IsNil(o.IsUsed) {
		return true
	}

	return false
}

// SetIsUsed gets a reference to the given bool and assigns it to the IsUsed field.
func (o *CryptoCurrencyOrder) SetIsUsed(v bool) {
	o.IsUsed = &v
}

// GetUsedTime returns the UsedTime field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetUsedTime() string {
	if o == nil || IsNil(o.UsedTime) {
		var ret string
		return ret
	}
	return *o.UsedTime
}

// GetUsedTimeOk returns a tuple with the UsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetUsedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UsedTime) {
		return nil, false
	}
	return o.UsedTime, true
}

// HasUsedTime returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasUsedTime() bool {
	if o != nil && !IsNil(o.UsedTime) {
		return true
	}

	return false
}

// SetUsedTime gets a reference to the given string and assigns it to the UsedTime field.
func (o *CryptoCurrencyOrder) SetUsedTime(v string) {
	o.UsedTime = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *CryptoCurrencyOrder) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetTerminalId returns the TerminalId field value if set, zero value otherwise.
func (o *CryptoCurrencyOrder) GetTerminalId() int32 {
	if o == nil || IsNil(o.TerminalId) {
		var ret int32
		return ret
	}
	return *o.TerminalId
}

// GetTerminalIdOk returns a tuple with the TerminalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrder) GetTerminalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TerminalId) {
		return nil, false
	}
	return o.TerminalId, true
}

// HasTerminalId returns a boolean if a field has been set.
func (o *CryptoCurrencyOrder) HasTerminalId() bool {
	if o != nil && !IsNil(o.TerminalId) {
		return true
	}

	return false
}

// SetTerminalId gets a reference to the given int32 and assigns it to the TerminalId field.
func (o *CryptoCurrencyOrder) SetTerminalId(v int32) {
	o.TerminalId = &v
}

func (o CryptoCurrencyOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoCurrencyOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferenceCode) {
		toSerialize["reference_code"] = o.ReferenceCode
	}
	if !IsNil(o.RequestedPrice) {
		toSerialize["requested_price"] = o.RequestedPrice
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CryptoCurrencyId) {
		toSerialize["crypto_currency_id"] = o.CryptoCurrencyId
	}
	if !IsNil(o.CryptoCurrencyData) {
		toSerialize["crypto_currency_data"] = o.CryptoCurrencyData
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if !IsNil(o.CurrencyDaya) {
		toSerialize["currency_daya"] = o.CurrencyDaya
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CryptoWallet) {
		toSerialize["crypto_wallet"] = o.CryptoWallet
	}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}
	if !IsNil(o.CommissionPercent) {
		toSerialize["commission_percent"] = o.CommissionPercent
	}
	if !IsNil(o.CommissionPrice) {
		toSerialize["commission_price"] = o.CommissionPrice
	}
	if !IsNil(o.NetworkFee) {
		toSerialize["network_fee"] = o.NetworkFee
	}
	if !IsNil(o.CryptoAmount) {
		toSerialize["crypto_amount"] = o.CryptoAmount
	}
	if !IsNil(o.CryptoPrice) {
		toSerialize["crypto_price"] = o.CryptoPrice
	}
	if !IsNil(o.CanPay) {
		toSerialize["can_pay"] = o.CanPay
	}
	if !IsNil(o.IsUsed) {
		toSerialize["is_used"] = o.IsUsed
	}
	if !IsNil(o.UsedTime) {
		toSerialize["used_time"] = o.UsedTime
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.TerminalId) {
		toSerialize["terminal_id"] = o.TerminalId
	}
	return toSerialize, nil
}

type NullableCryptoCurrencyOrder struct {
	value *CryptoCurrencyOrder
	isSet bool
}

func (v NullableCryptoCurrencyOrder) Get() *CryptoCurrencyOrder {
	return v.value
}

func (v *NullableCryptoCurrencyOrder) Set(val *CryptoCurrencyOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrencyOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrencyOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrencyOrder(val *CryptoCurrencyOrder) *NullableCryptoCurrencyOrder {
	return &NullableCryptoCurrencyOrder{value: val, isSet: true}
}

func (v NullableCryptoCurrencyOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrencyOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


