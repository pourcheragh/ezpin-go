/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"

	"github.com/shopspring/decimal"
)

// checks if the CryptoCurrencyCatalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoCurrencyCatalog{}

// CryptoCurrencyCatalog struct for CryptoCurrencyCatalog
type CryptoCurrencyCatalog struct {
	// id of the fiat currency
	CurrencyId *int32 `json:"currency_id,omitempty"`
	// Title of the fiat currency
	CurrencyTitle *string `json:"currency_title,omitempty"`
	// symbol of this fiat currency
	Symbol *string `json:"symbol,omitempty"`
	// code of this fiat currency
	Code *string `json:"code,omitempty"`
	// Price of crypto that you want to buy
	Price *decimal.Decimal `json:"price,omitempty"`
	// Minumumm amount that you can buy more than this price.
	MinAmount *decimal.Decimal `json:"min_amount,omitempty"`
	// Maximumm amount that you can buy this crpto currency less than this amount
	MaxAmount *decimal.Decimal `json:"max_amount,omitempty"`
	// id of this crypto currency
	CryptoCurrencyId *string `json:"crypto_currency_id,omitempty"`
	// name of this crypto currency
	CryptoTitle *string `json:"crypto_title,omitempty"`
	// symbol of this crypto currency
	CryptoSymbol *string `json:"crypto_symbol,omitempty"`
	// code of this crypto currency
	CryptoCode *string `json:"crypto_code,omitempty"`
}

// NewCryptoCurrencyCatalog instantiates a new CryptoCurrencyCatalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrencyCatalog() *CryptoCurrencyCatalog {
	this := CryptoCurrencyCatalog{}
	return &this
}

// NewCryptoCurrencyCatalogWithDefaults instantiates a new CryptoCurrencyCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyCatalogWithDefaults() *CryptoCurrencyCatalog {
	this := CryptoCurrencyCatalog{}
	return &this
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCurrencyId() int32 {
	if o == nil || IsNil(o.CurrencyId) {
		var ret int32
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCurrencyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given int32 and assigns it to the CurrencyId field.
func (o *CryptoCurrencyCatalog) SetCurrencyId(v int32) {
	o.CurrencyId = &v
}

// GetCurrencyTitle returns the CurrencyTitle field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCurrencyTitle() string {
	if o == nil || IsNil(o.CurrencyTitle) {
		var ret string
		return ret
	}
	return *o.CurrencyTitle
}

// GetCurrencyTitleOk returns a tuple with the CurrencyTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCurrencyTitleOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyTitle) {
		return nil, false
	}
	return o.CurrencyTitle, true
}

// HasCurrencyTitle returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCurrencyTitle() bool {
	if o != nil && !IsNil(o.CurrencyTitle) {
		return true
	}

	return false
}

// SetCurrencyTitle gets a reference to the given string and assigns it to the CurrencyTitle field.
func (o *CryptoCurrencyCatalog) SetCurrencyTitle(v string) {
	o.CurrencyTitle = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CryptoCurrencyCatalog) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CryptoCurrencyCatalog) SetCode(v string) {
	o.Code = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetPrice() decimal.Decimal {
	if o == nil || IsNil(o.Price) {
		var ret decimal.Decimal
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetPriceOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given decimal.Decimal and assigns it to the Price field.
func (o *CryptoCurrencyCatalog) SetPrice(v decimal.Decimal) {
	o.Price = &v
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetMinAmount() decimal.Decimal {
	if o == nil || IsNil(o.MinAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetMinAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.MinAmount) {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasMinAmount() bool {
	if o != nil && !IsNil(o.MinAmount) {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given decimal.Decimal and assigns it to the MinAmount field.
func (o *CryptoCurrencyCatalog) SetMinAmount(v decimal.Decimal) {
	o.MinAmount = &v
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetMaxAmount() decimal.Decimal {
	if o == nil || IsNil(o.MaxAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetMaxAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given decimal.Decimal and assigns it to the MaxAmount field.
func (o *CryptoCurrencyCatalog) SetMaxAmount(v decimal.Decimal) {
	o.MaxAmount = &v
}

// GetCryptoCurrencyId returns the CryptoCurrencyId field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCryptoCurrencyId() string {
	if o == nil || IsNil(o.CryptoCurrencyId) {
		var ret string
		return ret
	}
	return *o.CryptoCurrencyId
}

// GetCryptoCurrencyIdOk returns a tuple with the CryptoCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCryptoCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoCurrencyId) {
		return nil, false
	}
	return o.CryptoCurrencyId, true
}

// HasCryptoCurrencyId returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCryptoCurrencyId() bool {
	if o != nil && !IsNil(o.CryptoCurrencyId) {
		return true
	}

	return false
}

// SetCryptoCurrencyId gets a reference to the given string and assigns it to the CryptoCurrencyId field.
func (o *CryptoCurrencyCatalog) SetCryptoCurrencyId(v string) {
	o.CryptoCurrencyId = &v
}

// GetCryptoTitle returns the CryptoTitle field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCryptoTitle() string {
	if o == nil || IsNil(o.CryptoTitle) {
		var ret string
		return ret
	}
	return *o.CryptoTitle
}

// GetCryptoTitleOk returns a tuple with the CryptoTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCryptoTitleOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoTitle) {
		return nil, false
	}
	return o.CryptoTitle, true
}

// HasCryptoTitle returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCryptoTitle() bool {
	if o != nil && !IsNil(o.CryptoTitle) {
		return true
	}

	return false
}

// SetCryptoTitle gets a reference to the given string and assigns it to the CryptoTitle field.
func (o *CryptoCurrencyCatalog) SetCryptoTitle(v string) {
	o.CryptoTitle = &v
}

// GetCryptoSymbol returns the CryptoSymbol field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCryptoSymbol() string {
	if o == nil || IsNil(o.CryptoSymbol) {
		var ret string
		return ret
	}
	return *o.CryptoSymbol
}

// GetCryptoSymbolOk returns a tuple with the CryptoSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCryptoSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoSymbol) {
		return nil, false
	}
	return o.CryptoSymbol, true
}

// HasCryptoSymbol returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCryptoSymbol() bool {
	if o != nil && !IsNil(o.CryptoSymbol) {
		return true
	}

	return false
}

// SetCryptoSymbol gets a reference to the given string and assigns it to the CryptoSymbol field.
func (o *CryptoCurrencyCatalog) SetCryptoSymbol(v string) {
	o.CryptoSymbol = &v
}

// GetCryptoCode returns the CryptoCode field value if set, zero value otherwise.
func (o *CryptoCurrencyCatalog) GetCryptoCode() string {
	if o == nil || IsNil(o.CryptoCode) {
		var ret string
		return ret
	}
	return *o.CryptoCode
}

// GetCryptoCodeOk returns a tuple with the CryptoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyCatalog) GetCryptoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoCode) {
		return nil, false
	}
	return o.CryptoCode, true
}

// HasCryptoCode returns a boolean if a field has been set.
func (o *CryptoCurrencyCatalog) HasCryptoCode() bool {
	if o != nil && !IsNil(o.CryptoCode) {
		return true
	}

	return false
}

// SetCryptoCode gets a reference to the given string and assigns it to the CryptoCode field.
func (o *CryptoCurrencyCatalog) SetCryptoCode(v string) {
	o.CryptoCode = &v
}

func (o CryptoCurrencyCatalog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoCurrencyCatalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyId) {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if !IsNil(o.CurrencyTitle) {
		toSerialize["currency_title"] = o.CurrencyTitle
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.MinAmount) {
		toSerialize["min_amount"] = o.MinAmount
	}
	if !IsNil(o.MaxAmount) {
		toSerialize["max_amount"] = o.MaxAmount
	}
	if !IsNil(o.CryptoCurrencyId) {
		toSerialize["crypto_currency_id"] = o.CryptoCurrencyId
	}
	if !IsNil(o.CryptoTitle) {
		toSerialize["crypto_title"] = o.CryptoTitle
	}
	if !IsNil(o.CryptoSymbol) {
		toSerialize["crypto_symbol"] = o.CryptoSymbol
	}
	if !IsNil(o.CryptoCode) {
		toSerialize["crypto_code"] = o.CryptoCode
	}
	return toSerialize, nil
}

type NullableCryptoCurrencyCatalog struct {
	value *CryptoCurrencyCatalog
	isSet bool
}

func (v NullableCryptoCurrencyCatalog) Get() *CryptoCurrencyCatalog {
	return v.value
}

func (v *NullableCryptoCurrencyCatalog) Set(val *CryptoCurrencyCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrencyCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrencyCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrencyCatalog(val *CryptoCurrencyCatalog) *NullableCryptoCurrencyCatalog {
	return &NullableCryptoCurrencyCatalog{value: val, isSet: true}
}

func (v NullableCryptoCurrencyCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrencyCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


