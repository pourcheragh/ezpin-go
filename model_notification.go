/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notification{}

// Notification struct for Notification
type Notification struct {
	// The URL that status change will be reported to
	Endpoint *string `json:"endpoint,omitempty"`
	// The confidential key that you need for validation in your system
	ConfidentialKey *string `json:"confidential_key,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification() *Notification {
	this := Notification{}
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *Notification) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *Notification) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *Notification) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetConfidentialKey returns the ConfidentialKey field value if set, zero value otherwise.
func (o *Notification) GetConfidentialKey() string {
	if o == nil || IsNil(o.ConfidentialKey) {
		var ret string
		return ret
	}
	return *o.ConfidentialKey
}

// GetConfidentialKeyOk returns a tuple with the ConfidentialKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetConfidentialKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidentialKey) {
		return nil, false
	}
	return o.ConfidentialKey, true
}

// HasConfidentialKey returns a boolean if a field has been set.
func (o *Notification) HasConfidentialKey() bool {
	if o != nil && !IsNil(o.ConfidentialKey) {
		return true
	}

	return false
}

// SetConfidentialKey gets a reference to the given string and assigns it to the ConfidentialKey field.
func (o *Notification) SetConfidentialKey(v string) {
	o.ConfidentialKey = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.ConfidentialKey) {
		toSerialize["confidential_key"] = o.ConfidentialKey
	}
	return toSerialize, nil
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


