/*
EZPin Access API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ezpin

import (
	"encoding/json"
)

// checks if the CryptoCurrencyOrderCurrencyDaya type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoCurrencyOrderCurrencyDaya{}

// CryptoCurrencyOrderCurrencyDaya struct for CryptoCurrencyOrderCurrencyDaya
type CryptoCurrencyOrderCurrencyDaya struct {
	// title of fiat currency
	Currency *string `json:"currency,omitempty"`
	// symbol of this fiat currency
	Symbol *string `json:"symbol,omitempty"`
	// code of this fiat curreny
	Code *string `json:"code,omitempty"`
}

// NewCryptoCurrencyOrderCurrencyDaya instantiates a new CryptoCurrencyOrderCurrencyDaya object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrencyOrderCurrencyDaya() *CryptoCurrencyOrderCurrencyDaya {
	this := CryptoCurrencyOrderCurrencyDaya{}
	return &this
}

// NewCryptoCurrencyOrderCurrencyDayaWithDefaults instantiates a new CryptoCurrencyOrderCurrencyDaya object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyOrderCurrencyDayaWithDefaults() *CryptoCurrencyOrderCurrencyDaya {
	this := CryptoCurrencyOrderCurrencyDaya{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CryptoCurrencyOrderCurrencyDaya) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CryptoCurrencyOrderCurrencyDaya) SetCurrency(v string) {
	o.Currency = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CryptoCurrencyOrderCurrencyDaya) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CryptoCurrencyOrderCurrencyDaya) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CryptoCurrencyOrderCurrencyDaya) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CryptoCurrencyOrderCurrencyDaya) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CryptoCurrencyOrderCurrencyDaya) SetCode(v string) {
	o.Code = &v
}

func (o CryptoCurrencyOrderCurrencyDaya) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoCurrencyOrderCurrencyDaya) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableCryptoCurrencyOrderCurrencyDaya struct {
	value *CryptoCurrencyOrderCurrencyDaya
	isSet bool
}

func (v NullableCryptoCurrencyOrderCurrencyDaya) Get() *CryptoCurrencyOrderCurrencyDaya {
	return v.value
}

func (v *NullableCryptoCurrencyOrderCurrencyDaya) Set(val *CryptoCurrencyOrderCurrencyDaya) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrencyOrderCurrencyDaya) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrencyOrderCurrencyDaya) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrencyOrderCurrencyDaya(val *CryptoCurrencyOrderCurrencyDaya) *NullableCryptoCurrencyOrderCurrencyDaya {
	return &NullableCryptoCurrencyOrderCurrencyDaya{value: val, isSet: true}
}

func (v NullableCryptoCurrencyOrderCurrencyDaya) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrencyOrderCurrencyDaya) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


